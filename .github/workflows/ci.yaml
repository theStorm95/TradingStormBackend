name: CI

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  build-and-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npx tsc --noEmit

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test:ci

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Determine next version
        id: version
        run: |
          git fetch --tags

          PACKAGE_VERSION=$(jq -r '.version' package.json)
          PACKAGE_MAJOR=$(echo "$PACKAGE_VERSION" | cut -d. -f1)
          PACKAGE_MINOR=$(echo "$PACKAGE_VERSION" | cut -d. -f2)

          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          LATEST_VERSION=${LATEST_TAG#v}
          LATEST_MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
          LATEST_MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
          LATEST_PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3)

          if [ "$PACKAGE_MAJOR" -ne "$LATEST_MAJOR" ] || [ "$PACKAGE_MINOR" -ne "$LATEST_MINOR" ]; then
            NEW_TAG="v${PACKAGE_MAJOR}.${PACKAGE_MINOR}.0"
          else
            NEW_PATCH=$((LATEST_PATCH + 1))
            NEW_TAG="v${PACKAGE_MAJOR}.${PACKAGE_MINOR}.${NEW_PATCH}"
          fi

          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "New version will be: $NEW_TAG"

      - name: Lowercase image name
        run: |
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=ghcr.io/$OWNER_LOWER/trading-storm-backend" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build, tag, and push Docker image
        run: |
          docker build -t $IMAGE_NAME:$NEW_TAG .
          docker tag $IMAGE_NAME:$NEW_TAG $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$NEW_TAG
          docker push $IMAGE_NAME:latest

      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG
